<!-- app/views/admin/forms/index.html.erb - REPLACE THE ENTIRE FILE -->
<div class="page-header">
  <h1>Tax Forms Administration</h1>
  <div class="header-actions">
    <a href="<%= new_admin_form_path %>" class="btn btn-primary">Add New Form</a>
    <a href="<%= admin_export_json_path %>" class="btn btn-secondary">Export JSON</a>

    <%= form_with(url: admin_import_json_path, method: :post, multipart: true, class: "import-form") do |form| %>
      <%= form.file_field :json_file, accept: ".json", class: "file-input" %>
      <%= form.submit "Import JSON", class: "btn btn-secondary" %>
    <% end %>
  </div>
</div>

<div class="stats-bar">
  <p><strong>Total Forms:</strong> <%= @forms.count %></p>
</div>

<div class="grid-container">
  <div class="toolbar">
    <div class="toolbar-left">
      <select id="entityFilter">
        <option value="">All Entity Types</option>
        <% FormsRepository.new.available_entity_types.each do |entity_type| %>
          <option value="<%= entity_type %>"><%= entity_type.capitalize %></option>
        <% end %>
      </select>

      <input type="text" id="searchFilter" placeholder="Search forms..." style="min-width: 250px;">
    </div>

    <div class="toolbar-right">
      <label>
        Preview Year:
        <input type="number" id="previewYear" value="<%= @preview_year || 2024 %>" min="2000" max="2050">
      </label>

      <button id="refreshBtn" class="refresh-btn">Refresh</button>

      <label class="switch">
        <input type="checkbox" id="fullWidthToggle" checked>
        <span class="slider round"></span>
        <span class="toggle-label">Full Width</span>
      </label>
    </div>
  </div>

  <div id="formsGrid" class="ag-theme-alpine" style="height: 600px; width: 100%;"></div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal">
  <div class="modal-content">
    <h3>Confirm Delete</h3>
    <p>Are you sure you want to delete this form? This action cannot be undone.</p>
    <div class="modal-buttons">
      <button id="confirmDeleteBtn" class="delete-btn">Delete</button>
      <button id="cancelDeleteBtn" class="cancel-btn">Cancel</button>
    </div>
  </div>
</div>

<style>
    body {
        margin: 0;
        padding: 0;
    }

    .admin-container {
        max-width: 100%;
        margin: 0;
        padding: 0 10px;
    }

    .grid-container {
        width: 98%;
        margin: 0 auto;
        transition: width 0.3s ease;
    }

    .grid-container.full-width {
        width: 100%;
        margin: 0;
        padding: 0 10px;
    }

    .toolbar {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    .toolbar-left, .toolbar-right {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    select, input, button {
        padding: 0.5rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    .add-btn, .export-btn, .refresh-btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        color: white;
        cursor: pointer;
        text-decoration: none;
    }

    .add-btn {
        background-color: #28a745;
    }

    .export-btn {
        background-color: #007bff;
    }

    .refresh-btn {
        background-color: #6c757d;
    }

    /* Toggle Switch Styling */
    .switch {
        position: relative;
        display: inline-flex;
        align-items: center;
        height: 34px;
    }

    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .toggle-label {
        margin-left: 60px;
        white-space: nowrap;
        font-size: 14px;
        color: #333;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        width: 50px;
        height: 24px;
        background-color: #ccc;
        transition: .4s;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 18px;
        width: 18px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        transition: .4s;
    }

    input:checked + .slider {
        background-color: #17a2b8;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #17a2b8;
    }

    input:checked + .slider:before {
        transform: translateX(26px);
    }

    .slider.round {
        border-radius: 34px;
    }

    .slider.round:before {
        border-radius: 50%;
    }

    .action-btn {
        display: inline-block;
        padding: 6px 12px;
        margin: 0 4px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        transition: background-color 0.3s;
        white-space: nowrap;
    }

    .edit-btn {
        background-color: #007bff;
        color: white;
    }

    .delete-btn {
        background-color: #dc3545;
        color: white;
    }

    .cancel-btn {
        background-color: #6c757d;
        color: white;
    }

    .approximated {
        background-color: #fff3cd !important;
    }

    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border-radius: 5px;
        width: 400px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .modal-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    /* Page header styles */
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #dee2e6;
    }

    .header-actions {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .btn {
        padding: 8px 16px;
        border-radius: 4px;
        text-decoration: none;
        cursor: pointer;
        font-weight: 500;
        border: none;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .stats-bar {
        margin-bottom: 20px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    .import-form {
        display: flex;
        align-items: center;
        gap: 10px;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // State variables
        let gridApi;
        let formIdToDelete;

        // Helper function to format dates
        function formatDate(dateStr) {
            if (!dateStr) return 'N/A';
            const date = new Date(dateStr);
            return date.toLocaleDateString();
        }

        // Define column definitions with actions first
        const columnDefs = [
            {
                headerName: 'Actions',
                width: 200, // Increased width for the actions column
                pinned: 'left',
                lockPosition: true,
                sortable: false,
                filter: false,
                cellRenderer: function(params) {
                    return `
                    <div class="grid-actions">
                        <button class="action-btn edit-btn" data-id="${params.data.id}">Edit</button>
                        <button class="action-btn delete-btn" data-id="${params.data.id}">Delete</button>
                    </div>
                `;
                }
            },
            { field: 'id', headerName: 'ID', width: 80, pinned: 'left' },
            { field: 'formNumber', headerName: 'Form Number', width: 150 },
            { field: 'formName', headerName: 'Form Name', flex: 1, minWidth: 200 },
            {
                field: 'entityType',
                headerName: 'Entity Type',
                width: 150,
                cellRenderer: function(params) {
                    if (!params.value) return '';
                    return params.value.charAt(0).toUpperCase() + params.value.slice(1);
                }
            },
            { field: 'localityType', headerName: 'Locality Type', width: 150 },
            { field: 'locality', headerName: 'Locality', width: 150 },
            {
                field: 'dueDate',
                headerName: 'Due Date',
                width: 130,
                cellRenderer: function(params) {
                    return formatDate(params.value);
                },
                cellClassRules: {
                    'approximated': function(params) {
                        return params.data && params.data.approximated;
                    }
                }
            },
            {
                field: 'extensionDueDate',
                headerName: 'Extension Due Date',
                width: 180,
                cellRenderer: function(params) {
                    return formatDate(params.value);
                },
                cellClassRules: {
                    'approximated': function(params) {
                        return params.data && params.data.approximated;
                    }
                }
            }
        ];

        // Grid options
        const gridOptions = {
            columnDefs: columnDefs,
            defaultColDef: {
                sortable: true,
                filter: true,
                resizable: true
            },
            rowData: [],
            pagination: true,
            paginationPageSize: 25,
            domLayout: 'normal',
            animateRows: true,
            rowSelection: 'single'
        };

        // Initialize the grid
        const gridDiv = document.querySelector('#formsGrid');
        gridApi = new agGrid.Grid(gridDiv, gridOptions).gridApi;

        // Function to fetch data
        function fetchData() {
            const year = document.querySelector('#previewYear').value || '2024';
            const url = '<%= admin_forms_path(format: :json) %>?preview_year=' + year;

            fetch(url)
              .then(response => response.json())
              .then(data => {
                  gridOptions.api.setRowData(data);
              })
              .catch(error => {
                  console.error('Error fetching data:', error);
              });
        }

        // Apply filters
        function applyFilters() {
            const entityFilter = document.querySelector('#entityFilter').value;
            const searchText = document.querySelector('#searchFilter').value;

            if (gridOptions.api) {
                if (searchText) {
                    gridOptions.api.setQuickFilter(searchText);
                }

                if (entityFilter) {
                    const filterInstance = gridOptions.api.getFilterInstance('entityType');
                    if (filterInstance) {
                        filterInstance.setModel({
                            type: 'equals',
                            filter: entityFilter
                        });
                        gridOptions.api.onFilterChanged();
                    }
                } else {
                    gridOptions.api.setFilterModel(null);
                }
            }
        }

        // Toggle full width function - this directly modifies the admin-container class
        function toggleFullWidth() {
            const isFullWidth = document.getElementById('fullWidthToggle').checked;

            // Get both the grid container and the admin container
            const gridContainer = document.querySelector('.grid-container');
            const adminContainer = document.querySelector('.admin-container');

            if (isFullWidth) {
                gridContainer.classList.add('full-width');
                adminContainer.style.maxWidth = "100%";
                adminContainer.style.padding = "0";
                adminContainer.style.margin = "0";
            } else {
                gridContainer.classList.remove('full-width');
                adminContainer.style.maxWidth = "";
                adminContainer.style.padding = "";
                adminContainer.style.margin = "";
            }

            // Resize grid to fit new container size
            if (gridOptions.api) {
                setTimeout(() => {
                    gridOptions.api.sizeColumnsToFit();
                }, 300);
            }
        }

        // Delete confirmation modal functions
        function showDeleteModal(formId) {
            formIdToDelete = formId;
            document.getElementById('deleteModal').style.display = 'block';
        }

        function hideDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
            formIdToDelete = null;
        }

        function confirmDelete() {
            if (!formIdToDelete) return;

            fetch(`/admin/forms/${formIdToDelete}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Content-Type': 'application/json'
                }
            })
              .then(response => {
                  hideDeleteModal();
                  if (response.ok) {
                      fetchData();
                  } else {
                      alert('Error deleting form');
                  }
              })
              .catch(error => {
                  hideDeleteModal();
                  console.error('Error:', error);
              });
        }

        // Event listeners
        document.querySelector('#entityFilter').addEventListener('change', applyFilters);
        document.querySelector('#searchFilter').addEventListener('input', applyFilters);
        document.querySelector('#refreshBtn').addEventListener('click', fetchData);
        document.querySelector('#fullWidthToggle').addEventListener('change', toggleFullWidth);
        document.querySelector('#confirmDeleteBtn').addEventListener('click', confirmDelete);
        document.querySelector('#cancelDeleteBtn').addEventListener('click', hideDeleteModal);

        // Grid cell button click handlers
        document.querySelector('#formsGrid').addEventListener('click', function(e) {
            const btn = e.target.closest('.action-btn');
            if (!btn) return;

            const formId = btn.getAttribute('data-id');

            if (btn.classList.contains('edit-btn')) {
                window.location.href = `/admin/forms/${formId}/edit`;
            } else if (btn.classList.contains('delete-btn')) {
                showDeleteModal(formId);
            }
        });

        // Initial load
        fetchData();

        // Apply full width by default (toggle is checked by default in the HTML)
        toggleFullWidth();
    });
</script>