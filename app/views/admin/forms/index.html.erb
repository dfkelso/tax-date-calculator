<!-- app/views/admin/forms/index.html.erb -->
<h1>Tax Forms</h1>

<div class="grid-container">
  <div class="toolbar">
    <div class="toolbar-left">
      <select id="entityFilter" onchange="applyFilters()">
        <option value="">All Entity Types</option>
        <% FormsRepository.new.available_entity_types.each do |entity_type| %>
          <option value="<%= entity_type %>"><%= entity_type.capitalize %></option>
        <% end %>
      </select>

      <input type="text" id="searchFilter" placeholder="Search forms..." onkeyup="applyFilters()">
    </div>

    <div class="toolbar-right">
      <label>
        Preview Year:
        <input type="number" id="previewYear" value="<%= @preview_year || 2025 %>" min="2000" max="2050">
      </label>

      <button onclick="refreshGrid()" class="refresh-btn">Refresh</button>
      <a href="<%= new_admin_form_path %>" class="add-btn">Add New Form</a>
      <a href="<%= admin_export_json_path %>" class="export-btn">Export JSON</a>
    </div>
  </div>

  <div id="formsGrid" class="ag-theme-alpine" style="height: 600px; width: 100%;"></div>
</div>

<style>
    .toolbar {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    .toolbar-left, .toolbar-right {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    select, input, button {
        padding: 0.5rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    .add-btn, .export-btn, .refresh-btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        color: white;
        cursor: pointer;
        text-decoration: none;
    }

    .add-btn {
        background-color: #28a745;
    }

    .export-btn {
        background-color: #007bff;
    }

    .refresh-btn {
        background-color: #6c757d;
    }

    .grid-actions {
        display: flex;
        gap: 8px;
    }

    .edit-btn, .delete-btn {
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .edit-btn {
        color: #007bff;
    }

    .delete-btn {
        color: #dc3545;
    }

    .approximated {
        background-color: #fff3cd !important;
    }
</style>

<script>
    let gridApi;
    let columnDefs = [
        { field: 'id', headerName: 'ID', width: 80, sortable: true, filter: true },
        {
            field: 'formNumber',
            headerName: 'Form Number',
            width: 150,
            sortable: true,
            filter: true
        },
        {
            field: 'formName',
            headerName: 'Form Name',
            flex: 1,
            minWidth: 200,
            sortable: true,
            filter: true
        },
        {
            field: 'entityType',
            headerName: 'Entity Type',
            width: 150,
            sortable: true,
            filter: true,
            cellRenderer: params => params.value ? params.value.charAt(0).toUpperCase() + params.value.slice(1) : ''
        },
        {
            field: 'localityType',
            headerName: 'Locality Type',
            width: 150,
            sortable: true,
            filter: true
        },
        {
            field: 'locality',
            headerName: 'Locality',
            width: 150,
            sortable: true,
            filter: true
        },
        {
            field: 'dueDate',
            headerName: 'Due Date',
            width: 130,
            sortable: true,
            filter: true,
            cellRenderer: params => {
                if (!params.value) return 'N/A';
                const date = new Date(params.value);
                return date.toLocaleDateString();
            },
            cellClassRules: {
                'approximated': params => params.data.approximated
            }
        },
        {
            field: 'extensionDueDate',
            headerName: 'Extension Due Date',
            width: 180,
            sortable: true,
            filter: true,
            cellRenderer: params => {
                if (!params.value) return 'N/A';
                const date = new Date(params.value);
                return date.toLocaleDateString();
            },
            cellClassRules: {
                'approximated': params => params.data.approximated
            }
        },
        {
            headerName: 'Actions',
            width: 120,
            sortable: false,
            filter: false,
            cellRenderer: params => {
                return `
          <div class="grid-actions">
            <a href="/admin/forms/${params.data.id}/edit" class="edit-btn" title="Edit">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"/>
              </svg>
            </a>
            <button onclick="confirmDelete(${params.data.id})" class="delete-btn" title="Delete">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
              </svg>
            </button>
          </div>
        `;
            }
        }
    ];

    // Initialize the grid when the page loads
    document.addEventListener('DOMContentLoaded', function() {
        const gridOptions = {
            columnDefs: columnDefs,
            defaultColDef: {
                resizable: true,
                sortable: true,
                filter: true
            },
            animateRows: true,
            rowSelection: 'single',
            pagination: true,
            paginationPageSize: 25,
            onRowClicked: function(event) {
                // If click was on a button or link, let the default handler work
                if (event.event.target.closest('.grid-actions')) {
                    return;
                }

                // Otherwise navigate to edit page
                const formId = event.data.id;
                window.location.href = `/admin/forms/${formId}/edit`;
            }
        };

        // Initialize the grid
        gridApi = new agGrid.Grid(document.getElementById('formsGrid'), gridOptions);

        // Fetch initial data
        fetchData();
    });

    function fetchData() {
        const year = document.getElementById('previewYear').value || <%= @preview_year || 2025 %>;
        const url = '<%= admin_forms_path(format: :json) %>?preview_year=' + year;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                gridApi.gridOptions.api.setRowData(data);
            })
            .catch(error => {
                console.error('Error fetching forms data:', error);
            });
    }

    function applyFilters() {
        const entityFilter = document.getElementById('entityFilter').value;
        const searchText = document.getElementById('searchFilter').value.toLowerCase();

        gridApi.gridOptions.api.setQuickFilter(searchText);

        if (entityFilter) {
            gridApi.gridOptions.api.setFilterModel({
                entityType: {
                    type: 'equals',
                    filter: entityFilter
                }
            });
        } else {
            gridApi.gridOptions.api.setFilterModel(null);
            gridApi.gridOptions.api.setQuickFilter(searchText);
        }
    }

    function refreshGrid() {
        fetchData();
    }

    function confirmDelete(formId) {
        if (confirm('Are you sure you want to delete this form?')) {
            fetch(`/admin/forms/${formId}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        fetchData();
                    } else {
                        alert('Error deleting form');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
    }
</script>