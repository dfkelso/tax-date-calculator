<!-- app/views/admin/forms/edit.html.erb -->

<div class="card ai-assistant-card">
  <div class="card-header">
    <h2>AI Due Date Assistant</h2>
  </div>
  <div class="card-body">
    <p>Let our AI assistant generate calculation rules for this form by researching past 7 years of due dates.</p>

    <%= button_to generate_ai_rules_admin_form_path(@form['id'] || params[:id]), method: :post, class: "btn btn-primary" do %>
      Generate Calculation Rules
    <% end %>
  </div>
</div>

<div class="form-header">
  <h1>Edit Tax Form: <%= @form['formNumber'] %></h1>
  <div class="form-actions">
    <a href="<%= new_admin_form_calculation_rule_path(params[:id]) %>" class="btn btn-success">Add Calculation Rule</a>
  </div>
</div>

<form id="formEditor" action="<%= admin_form_path(params[:id]) %>" method="post">
  <input type="hidden" name="_method" value="patch">
  <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">

  <div class="card">
    <div class="card-header">
      <h2>Basic Information</h2>
    </div>
    <div class="card-body">
      <div class="form-row">
        <div class="form-group">
          <label for="form_number">Form Number</label>
          <input type="text" id="form_number" name="form_number" value="<%= @form['formNumber'] %>" required class="form-control">
        </div>

        <div class="form-group">
          <label for="form_name">Form Name</label>
          <input type="text" id="form_name" name="form_name" value="<%= @form['formName'] %>" required class="form-control">
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="entity_type">Entity Type</label>
          <select id="entity_type" name="entity_type" required class="form-control">
            <% @available_entity_types.each do |entity_type| %>
              <option value="<%= entity_type %>" <%= 'selected' if @form['entityType'] == entity_type %>><%= entity_type.capitalize %></option>
            <% end %>
          </select>
        </div>

        <div class="form-group">
          <label for="locality_type">Locality Type</label>
          <select id="locality_type" name="locality_type" required class="form-control">
            <% @available_locality_types.each do |locality_type| %>
              <option value="<%= locality_type %>" <%= 'selected' if @form['localityType'] == locality_type %>><%= locality_type.capitalize %></option>
            <% end %>
          </select>
        </div>

        <div class="form-group">
          <label for="locality">Locality</label>
          <input type="text" id="locality" name="locality" value="<%= @form['locality'] %>" required class="form-control">
        </div>
      </div>

      <div class="form-row">
        <div class="form-group checkbox-group">
          <label class="checkbox-container">
            <% is_parent = @form['parentFormNumbers'] && @form['parentFormNumbers'].include?(@form['formNumber']) %>
            <input type="checkbox" id="is_parent" name="is_parent" <%= 'checked' if is_parent %>>
            <span class="checkbox-label">Is Parent Form?</span>
          </label>
        </div>

        <div class="form-group" id="parent_form_field" style="<%= is_parent ? 'display: none;' : '' %>">
          <label for="parent_form_number">Parent Form</label>
          <select id="parent_form_number" name="parent_form_number" class="form-control">
            <option value="">Select Parent Form</option>
            <% @parent_forms.each do |f| %>
              <option value="<%= f['formNumber'] %>" <%= 'selected' if @form['parentFormNumbers']&.first == f['formNumber'] %>><%= f['formNumber'] %></option>
            <% end %>
          </select>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="owner">Owner</label>
          <input type="text" id="owner" name="owner" value="<%= @form['owner'] || 'MPM' %>" class="form-control">
        </div>

        <div class="form-group">
          <label for="calculation_base">Calculation Base</label>
          <select id="calculation_base" name="calculation_base" class="form-control">
            <option value="end" <%= 'selected' if @form['calculationBase'] == 'end' || !@form['calculationBase'] %>>End</option>
            <option value="start" <%= 'selected' if @form['calculationBase'] == 'start' %>>Start</option>
          </select>
        </div>
      </div>
    </div>
  </div>

  <div class="card">
    <div class="card-header">
      <h2>Extension Information</h2>
    </div>
    <div class="card-body">
      <div class="form-row">
        <div class="form-group">
          <label for="extension_form_number">Extension Form Number</label>
          <input type="text" id="extension_form_number" name="extension_form_number" value="<%= @form.dig('extension', 'formNumber') %>" class="form-control">
        </div>

        <div class="form-group">
          <label for="extension_form_name">Extension Form Name</label>
          <input type="text" id="extension_form_name" name="extension_form_name" value="<%= @form.dig('extension', 'formName') %>" class="form-control">
        </div>

        <div class="form-group checkbox-group">
          <label class="checkbox-container">
            <input type="checkbox" id="piggyback_fed" name="piggyback_fed" <%= 'checked' if @form.dig('extension', 'piggybackFed') %>>
            <span class="checkbox-label">Piggyback Fed?</span>
          </label>
        </div>
      </div>
    </div>
  </div>

  <div class="card ai-assistant-card" data-controller="ai-assistant">
    <div class="card-header">
      <h2>AI Due Date Assistant</h2>
    </div>
    <div class="card-body">
      <p>Let our AI assistant generate calculation rules for this form by researching past 7 years of due dates.</p>

      <button type="button" class="btn btn-info" data-action="ai-assistant#generateRules">
        Generate Calculation Rules
      </button>
    </div>

    <!-- Modal for displaying results -->
    <div class="modal" data-ai-assistant-target="modal">
      <div class="modal-content">
        <div class="spinner" data-ai-assistant-target="spinner">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p>Researching due dates for this form...</p>
        </div>
        <div data-ai-assistant-target="result"></div>
      </div>
    </div>
  </div>

  <div class="form-submit-actions">
    <button type="submit" class="btn btn-primary">Update Form</button>
    <a href="<%= admin_forms_path %>" class="btn btn-secondary">Back to List</a>
    <button type="button" id="deleteFormBtn" class="btn btn-danger">Delete Form</button>
  </div>
</form>

<div class="card calculation-rules-card">
  <div class="calculation-rules-header-container" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
    <h2>Calculation Rules</h2>
    <div class="fill-missing-years-container">
      <button type="button" id="fillMissingYearsBtn" class="btn btn-info">
        Fill Missing Years
      </button>
    </div>
  </div>

  <div class="card-body">
    <% if @form['calculationRules'] && @form['calculationRules'].any? %>
      <div class="rules-container">
        <% @form['calculationRules'].each_with_index do |rule, index| %>
          <div class="rule-card">
            <div class="rule-card-header">
              <h3>Rule #<%= index + 1 %></h3>
              <div class="rule-actions">
                <a href="<%= edit_admin_form_calculation_rule_path(params[:id], index) %>" class="btn btn-sm btn-primary">Edit</a>
                <%= button_to "Delete", admin_form_calculation_rule_path(params[:id], index), method: :delete, form: { data: { turbo_confirm: "Are you sure?" } }, class: "btn btn-sm btn-danger" %>
              </div>
            </div>

            <div class="rule-card-body">
              <div class="rule-info">
                <p><strong>Effective Years:</strong> <%= rule['effectiveYears'].join(', ') %></p>

                <p><strong>Due Date:</strong> <%= rule.dig('dueDate', 'monthsAfterYearEnd') %> months after year end, day <%= rule.dig('dueDate', 'dayOfMonth') %></p>

                <% if rule.dig('extensionDueDate') %>
                  <p><strong>Extension Due Date:</strong> <%= rule.dig('extensionDueDate', 'monthsAfterYearEnd') %> months after year end, day <%= rule.dig('extensionDueDate', 'dayOfMonth') %></p>
                <% end %>

                <% if rule.dig('dueDate', 'fiscalYearExceptions') %>
                  <div class="fiscal-exceptions">
                    <p><strong>Fiscal Year Exceptions:</strong></p>
                    <ul>
                      <% rule.dig('dueDate', 'fiscalYearExceptions').each do |month, exception| %>
                        <li>
                          Month <%= month %>: <%= exception['monthsAfterYearEnd'] %> months after year end, day <%= exception['dayOfMonth'] %>
                        </li>
                      <% end %>
                    </ul>
                  </div>
                <% end %>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    <% else %>
      <p class="no-rules-message">No calculation rules defined for this form.</p>
    <% end %>

    <div class="rule-actions-container">
      <a href="<%= new_admin_form_calculation_rule_path(params[:id]) %>" class="btn btn-success">Add Calculation Rule</a>

      <%= button_to fill_missing_years_admin_form_path(params[:id]), method: :post, class: "btn btn-info", style: "margin-left: 10px; display: inline-block;" do %>
        Fill Missing Years
      <% end %>
    </div>

  </div>
</div>

<!-- Delete Form Confirmation Modal -->
<div id="deleteFormModal" class="modal">
  <div class="modal-content">
    <h3>Confirm Delete</h3>
    <p>Are you sure you want to delete this form? This action cannot be undone.</p>
    <div class="modal-buttons">
      <%= button_to "Delete Form", admin_form_path(params[:id]), method: :delete, class: "btn btn-danger" %>
      <button type="button" id="cancelDeleteForm" class="btn btn-secondary">Cancel</button>
    </div>
  </div>
</div>

<!-- Missing Years Modal -->
<div id="missingYearsModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>Fill Missing Years</h3>
      <span class="close">&times;</span>
    </div>
    <div class="modal-body">
      <div id="missingYearsSpinner" style="display: none;">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p>Researching due dates for missing years...</p>
      </div>
      <div id="missingYearsResult"></div>
    </div>
  </div>
</div>

<style>
    /* Modern Form Styling */
    body {
        color: #333;
        line-height: 1.6;
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
        overflow: hidden;
    }

    .card-header {
        background: #f8f9fa;
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid #e9ecef;
    }

    .card-header h2 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: #212529;
    }

    .card-body {
        padding: 1.75rem;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        margin-bottom: 1.75rem;
        align-items: flex-start;
    }

    .form-row:last-child {
        margin-bottom: 0;
    }

    .form-group {
        flex: 1;
        min-width: 240px;
        margin-bottom: 1.25rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #495057;
    }

    .form-control {
        display: block;
        width: 100%;
        height: calc(2.25rem + 2px);
        padding: 0.6rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 4px;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        box-sizing: border-box;
    }

    select.form-control {
        height: calc(2.25rem + 2px);
        padding: 0.375rem 0.75rem;
    }

    .form-control:focus {
        border-color: #80bdff;
        outline: 0;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .checkbox-group {
        display: flex;
        align-items: center;
        min-height: calc(2.25rem + 2px);
        padding-top: 1.65rem;
    }

    .checkbox-container {
        display: flex;
        align-items: center;
        cursor: pointer;
    }

    .checkbox-container input[type="checkbox"] {
        width: 18px;
        height: 18px;
        margin-right: 0.5rem;
    }

    .checkbox-label {
        margin-left: 0.5rem;
        font-weight: 400;
    }

    .btn {
        display: inline-block;
        font-weight: 500;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        user-select: none;
        border: 1px solid transparent;
        padding: 0.6rem 1rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;
        cursor: pointer;
    }

    .btn-sm {
        padding: 0.35rem 0.6rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }

    .btn-primary {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-primary:hover {
        background-color: #0069d9;
        border-color: #0062cc;
    }

    .btn-secondary {
        color: #fff;
        background-color: #6c757d;
        border-color: #6c757d;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
        border-color: #545b62;
    }

    .btn-success {
        color: #fff;
        background-color: #28a745;
        border-color: #28a745;
    }

    .btn-success:hover {
        background-color: #218838;
        border-color: #1e7e34;
    }

    .btn-danger {
        color: #fff;
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn-danger:hover {
        background-color: #c82333;
        border-color: #bd2130;
    }

    .btn-info {
        color: #fff;
        background-color: #17a2b8;
        border-color: #17a2b8;
    }

    .form-submit-actions {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    /* Calculation Rules Styling */
    .calculation-rules-card {
        margin-top: 2rem;
    }

    .rules-container {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .rule-card {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
        margin-bottom: 0.5rem;
        overflow: hidden;
    }

    .rule-card-header {
        background: #e9ecef;
        padding: 0.75rem 1.25rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #dee2e6;
    }

    .rule-card-header h3 {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .rule-actions {
        display: flex;
        gap: 0.75rem;
    }

    .rule-card-body {
        padding: 1.25rem;
    }

    .rule-info p {
        margin: 0 0 0.75rem 0;
        line-height: 1.5;
    }

    .fiscal-exceptions {
        margin-top: 0.75rem;
        padding-left: 1rem;
        border-left: 3px solid #dee2e6;
    }

    .fiscal-exceptions ul {
        margin: 0.75rem 0 0 1.5rem;
        padding: 0;
    }

    .fiscal-exceptions li {
        margin-bottom: 0.5rem;
    }

    .no-rules-message {
        font-style: italic;
        color: #6c757d;
    }

    .rule-actions-container {
        margin-top: 1.75rem;
        padding-top: 1.25rem;
        border-top: 1px solid #e9ecef;
    }

    /* Modal Styling */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 2rem;
        border-radius: 5px;
        width: 400px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .modal-header {
        padding: 10px 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-header h3 {
        margin: 0;
    }

    .close {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .close:hover {
        color: #000;
    }

    .modal-content h3 {
        margin-top: 0;
        margin-bottom: 1rem;
    }

    .modal-content p {
        margin-bottom: 1.5rem;
    }

    .modal-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
    }

    /* AI Assistant Card Styles */
    .ai-assistant-card {
        margin-top: 2rem;
        margin-bottom: 2rem;
        border: 1px solid #17a2b8;
    }

    .ai-assistant-card .card-header {
        background-color: #17a2b8;
        color: white;
    }

    .spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .calculation-rules-preview {
        max-height: 500px;
        overflow-y: auto;
        padding: 1rem;
    }

    .rule-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .spinner-border {
        display: inline-block;
        width: 2rem;
        height: 2rem;
        border: 0.25rem solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border .75s linear infinite;
    }

    @keyframes spinner-border {
        to { transform: rotate(360deg); }
    }

    .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }

    .error {
        color: #721c24;
        background-color: #f8d7da;
        padding: 1rem;
        border-radius: 4px;
        margin-bottom: 1rem;
    }

    .ai-assistant-card {
        margin-bottom: 2rem;
        background-color: #55a5b5;
        color: white;
    }

    .ai-assistant-card .card-header {
        background-color: #3a8999;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .ai-assistant-card .card-header h2 {
        color: white;
    }

    .ai-assistant-card .btn-primary {
        background-color: #fff;
        color: #3a8999;
        border: none;
        font-weight: bold;
    }

    .ai-assistant-card .btn-primary:hover {
        background-color: #f0f0f0;
    }

</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Toggle parent form field visibility based on checkbox
        const isParentCheckbox = document.getElementById('is_parent');
        const parentFormField = document.getElementById('parent_form_field');

        isParentCheckbox.addEventListener('change', function() {
            parentFormField.style.display = this.checked ? 'none' : 'block';
        });

        // Delete form modal functionality
        const deleteFormBtn = document.getElementById('deleteFormBtn');
        const deleteFormModal = document.getElementById('deleteFormModal');
        const cancelDeleteForm = document.getElementById('cancelDeleteForm');

        deleteFormBtn.addEventListener('click', function(e) {
            e.preventDefault();
            deleteFormModal.style.display = 'block';
        });

        cancelDeleteForm.addEventListener('click', function() {
            deleteFormModal.style.display = 'none';
        });

        // Close modal when clicking outside of it
        window.addEventListener('click', function(e) {
            if (e.target === deleteFormModal) {
                deleteFormModal.style.display = 'none';
            }
        });

        // Fill missing years modal functionality
        const fillMissingYearsBtn = document.getElementById('fillMissingYearsBtn');
        const missingYearsModal = document.getElementById('missingYearsModal');
        const missingYearsSpinner = document.getElementById('missingYearsSpinner');
        const missingYearsResult = document.getElementById('missingYearsResult');
        const closeBtn = missingYearsModal.querySelector('.close');

        fillMissingYearsBtn.addEventListener('click', function() {
            console.log("Fill Missing Years button clicked");
            missingYearsModal.style.display = 'block';
            missingYearsSpinner.style.display = 'flex';
            missingYearsResult.innerHTML = '';

            // Get the form ID from the URL
            const urlPath = window.location.pathname;
            console.log("URL path:", urlPath);

            // Extract the numeric ID from the URL path
            const match = urlPath.match(/\/admin\/forms\/(\d+)/);
            const formId = match ? match[1] : null;

            console.log("Form ID:", formId);

            if (!formId) {
                missingYearsSpinner.style.display = 'none';
                missingYearsResult.innerHTML = '<div class="error">Cannot identify form ID from URL</div>';
                return;
            }

            const apiUrl = `/admin/forms/${formId}/fill_missing_years`;
            console.log("API URL:", apiUrl);

            fetch(apiUrl)
              .then(response => {
                  console.log("Response status:", response.status);
                  return response.text().then(text => {
                      console.log("Raw response:", text);
                      try {
                          return JSON.parse(text);
                      } catch (e) {
                          throw new Error(`Failed to parse JSON: ${e.message}\nRaw response: ${text}`);
                      }
                  });
              })
              .then(data => {
                  console.log("Parsed data:", data);
                  missingYearsSpinner.style.display = 'none';

                  if (data.error) {
                      missingYearsResult.innerHTML = `<div class="error">${data.error}</div>`;
                      return;
                  }

                  displayMissingYearsResults(data);
              })
              .catch(error => {
                  console.error("Fetch error:", error);
                  missingYearsSpinner.style.display = 'none';
                  missingYearsResult.innerHTML = `<div class="error">Error: ${error.message}</div>`;
              });
        });

        closeBtn.addEventListener('click', function() {
            missingYearsModal.style.display = 'none';
        });

        window.addEventListener('click', function(event) {
            if (event.target === missingYearsModal) {
                missingYearsModal.style.display = 'none';
            }
        });

        function displayMissingYearsResults(data) {
            console.log("Displaying missing years results:", data);
            if (!data.rules?.calculationRules || data.rules.calculationRules.length === 0) {
                missingYearsResult.innerHTML = '<div class="error">No calculation rules found for missing years</div>';
                return;
            }

            // Sort rules by years (newest first)
            data.rules.calculationRules.sort((a, b) => {
                return Math.max(...b.effectiveYears) - Math.max(...a.effectiveYears);
            });

            let html = '<div class="calculation-rules-preview">';
            html += '<h3>Generated Rules for Missing Years</h3>';

            data.rules.calculationRules.forEach((rule, index) => {
                html += `
          <div class="rule-card">
            <div class="rule-card-header">
              <h4>Rule #${index + 1} - Years: ${rule.effectiveYears.join(', ')}</h4>
            </div>
            <div class="rule-card-body">
              <p><strong>Due Date:</strong> ${rule.dueDate.monthsAfterYearEnd} months after year end, day ${rule.dueDate.dayOfMonth}</p>

              ${rule.extensionDueDate ?
                  `<p><strong>Extension Due Date:</strong> ${rule.extensionDueDate.monthsAfterYearEnd} months after year end, day ${rule.extensionDueDate.dayOfMonth}</p>` :
                  '<p><strong>Extension Due Date:</strong> Not available</p>'
                }

              ${rule.dueDate.fiscalYearExceptions ?
                  renderFiscalExceptions(rule.dueDate.fiscalYearExceptions) :
                  ''
                }
            </div>
            <div class="rule-card-footer">
              <label class="checkbox-container">
                <input type="checkbox" class="rule-checkbox" data-rule-index="${index}" checked>
                <span class="checkbox-label">Include this rule</span>
              </label>
            </div>
          </div>
        `;
            });

            html += `
        <div class="rule-actions">
          <button type="button" class="btn btn-primary" id="applyMissingRulesBtn">Apply Selected Rules</button>
          <button type="button" class="btn btn-secondary" id="closeMissingRulesBtn">Close</button>
        </div>
      </div>`;

            missingYearsResult.innerHTML = html;

            // Add event listener for the "Apply" button
            document.getElementById('applyMissingRulesBtn').addEventListener('click', function() {
                console.log("Apply Missing Rules button clicked");
                const formId = window.location.pathname.split('/').filter(Boolean).pop();
                const selectedRules = [];

                document.querySelectorAll('.rule-checkbox:checked').forEach((checkbox) => {
                    const index = parseInt(checkbox.dataset.ruleIndex);
                    selectedRules.push(data.rules.calculationRules[index]);
                });

                console.log("Selected rules:", selectedRules);
                console.log("Existing years:", data.existing_years);

                // Send AJAX request to update the form
                fetch(`/admin/forms/${formId}/update_calculation_rules`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    body: JSON.stringify({ calculation_rules: selectedRules, existing_years: data.existing_years })
                })
                  .then(response => {
                      console.log("Response status:", response.status);
                      return response.text().then(text => {
                          console.log("Raw response:", text);
                          try {
                              return JSON.parse(text);
                          } catch (e) {
                              throw new Error(`Failed to parse JSON: ${e.message}\nRaw response: ${text}`);
                          }
                      });
                  })
                  .then(data => {
                      console.log("Update response:", data);
                      if (data.success) {
                          // Refresh the page to show updated rules
                          window.location.reload();
                      } else {
                          alert('Failed to update calculation rules: ' + (data.error || 'Unknown error'));
                      }
                  })
                  .catch(error => {
                      console.error('Error:', error);
                      alert('An error occurred while updating calculation rules');
                  });
            });

            document.getElementById('closeMissingRulesBtn').addEventListener('click', function() {
                missingYearsModal.style.display = 'none';
            });
        }

        function renderFiscalExceptions(exceptions) {
            let html = '<div class="fiscal-exceptions"><p><strong>Fiscal Year Exceptions:</strong></p><ul>';

            for (const [month, exception] of Object.entries(exceptions)) {
                html += `<li>Month ${month}: ${exception.monthsAfterYearEnd} months after year end, day ${exception.dayOfMonth}</li>`;
            }

            html += '</ul></div>';
            return html;
        }
    });
</script>